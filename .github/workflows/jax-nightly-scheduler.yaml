name: jax-nightly-scheduler

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

jobs:
  run-tpu-single-slice-training-test:
    runs-on: ubuntu-latest
    if: always()
    permissions:
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run JAX Nightly Sequence Training Tests
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Triggering workflow: tpu-single-slice-training-test.yaml"
          gh workflow run tpu-single-slice-training-test.yaml --ref jax_nightly_py3.12

          echo "Waiting 30 seconds for the new run to be registered with the API..."
          sleep 30

          echo "Fetching the ID of the new run..."
          RUN_ID=$(gh run list --workflow="tpu-single-slice-training-test.yaml" --branch jax_nightly_py3.12 --limit 1 --json databaseId -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "Error: Could not find a recent run for the workflow."
            exit 1
          fi

          echo "Found run ID: $RUN_ID. Waiting for it to complete... every 3 mins"
          gh run watch "$RUN_ID" --interval 180
  
  run-tpu-multi-slices-training-test:
    runs-on: ubuntu-latest
    needs: run-tpu-single-slice-training-test
    if: always()
    permissions:
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run JAX Nightly Sequence Training Tests
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Triggering workflow: tpu-multislice-training-test.yaml"
          gh workflow run tpu-multislice-training-test.yaml --ref jax_nightly_py3.12

          echo "Waiting 30 seconds for the new run to be registered with the API..."
          sleep 30

          echo "Fetching the ID of the new run..."
          RUN_ID=$(gh run list --workflow="tpu-multislice-training-test.yaml" --branch jax_nightly_py3.12 --limit 1 --json databaseId -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "Error: Could not find a recent run for the workflow."
            exit 1
          fi

          echo "Found run ID: $RUN_ID. Waiting for it to complete... every 3 mins"
          gh run watch "$RUN_ID" --interval 180
   
  
  run-gpu-single-host-training-test:
    runs-on: ubuntu-latest
    needs: run-tpu-multi-slices-training-test
    if: always()
    permissions:
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run JAX Nightly Sequence Training Tests
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Triggering workflow: gpu-training-test.yaml"
          gh workflow run gpu-training-test.yaml --ref jax_nightly_py3.12

          echo "Waiting 30 seconds for the new run to be registered with the API..."
          sleep 30

          echo "Fetching the ID of the new run..."
          RUN_ID=$(gh run list --workflow="gpu-training-test.yaml" --branch jax_nightly_py3.12 --limit 1 --json databaseId -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "Error: Could not find a recent run for the workflow."
            exit 1
          fi

          echo "Found run ID: $RUN_ID. Waiting for it to complete... every 3 mins"
          gh run watch "$RUN_ID" --interval 180
  
  run-gpu-multi-hosts-training-test:
    runs-on: ubuntu-latest
    needs: run-gpu-single-host-training-test
    if: always()
    permissions:
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run JAX Nightly Sequence Training Tests
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Triggering workflow: gpu-multihost-training-test.yaml"
          gh workflow run gpu-multihost-training-test.yaml --ref jax_nightly_py3.12

          echo "Waiting 30 seconds for the new run to be registered with the API..."
          sleep 30

          echo "Fetching the ID of the new run..."
          RUN_ID=$(gh run list --workflow="gpu-multihost-training-test.yaml" --branch jax_nightly_py3.12 --limit 1 --json databaseId -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "Error: Could not find a recent run for the workflow."
            exit 1
          fi

          echo "Found run ID: $RUN_ID. Waiting for it to complete... every 3 mins"
          gh run watch "$RUN_ID" --interval 180
